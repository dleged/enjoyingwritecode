// 题目描述：
// 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
// 1. 数字 1-9 在每一行只能出现一次。
// 2. 数字 1-9 在每一列只能出现一次。
// 3. 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

// 数独部分空格内已填入了数字，空白格用 '.' 表示。

/**
 * @param {character[][]} board
 * @return {boolean}
 */
function isValidSudoku(board) {
  const rows = Array.from({ length: 9 }, () => new Set());
  const columns = Array.from({ length: 9 }, () => new Set());
  const boxes = Array.from({ length: 9 }, () => new Set());
  // 空方法，待实现
  for (let i = 0; i < 9; i++) {
    for (let j = 0; j < 9; j++) {
      let num = board[i][j];
      if (num === '.') continue;

      // 解决粗实现 3 * 3 问题
      const boxsIndex = Math.floor(i / 3) * 3 + Math.floor(j / 3); // 9 个数都在一个 boxs 中

      if (rows[i].has(num) || columns[j].has(num) || boxes[boxIndex].has(num)) {
        return false;
      }
      rows[i].add(num);
      columns[j].add(num);
      boxes[boxsIndex].add(num);
    }
  }

  return true;
}

// 测试用例1
// 输入: 
let board1 = [
  ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
  ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
  ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
  ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
  ['4', '.', '.', '8', '.', '3', '.', '.', '1'],
  ['7', '.', '.', '.', '2', '.', '.', '.', '6'],
  ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
  ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
  ['.', '.', '.', '.', '8', '.', '.', '7', '9']
];
// 输出: true
console.log(isValidSudoku(board1)); // 应输出 true

// 测试用例2
// 输入: 
let board2 = [
  ['8', '3', '.', '.', '7', '.', '.', '.', '.'],
  ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
  ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
  ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
  ['4', '.', '.', '8', '.', '3', '.', '.', '1'],
  ['7', '.', '.', '.', '2', '.', '.', '.', '6'],
  ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
  ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
  ['.', '.', '.', '.', '8', '.', '.', '7', '9']
];
// 输出: false
console.log(isValidSudoku(board2)); // 应输出 false
